{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Hexpat",
	"patterns": [
        {
            "include": "#expression"
        }
	],
	"repository": {
        "expression": {
            "patterns": [
                {"include": "#keywords"},
                {"include": "#paren-expression"},
                {"include": "#scope"},
                {"include": "#type"},
                {"include": "#line-comment"},
                {"include": "#block-comment"},
                {"include": "#endianness"},
                {"include": "#type-unsigned"},
                {"include": "#type-signed"},
                {"include": "#type-float"},
                {"include": "#type-special"},
                {"include": "#type"},
                {"include": "#string"},
                {"include": "#char"},
                {"include": "#attribute"},
                {"include": "#array"},
                {"include": "#semicolon"},
                {"include": "#coma"},
                {"include": "#constant-numeric-dec"},
                {"include": "#constant-numeric-hex"},
                {"include": "#constant-numeric-oct"},
                {"include": "#constant-numeric-bin"},
                {"include": "#constant-numeric-float"},
                {"include": "#constant-numeric-double"},
                {"include": "#constant-language-boolean"},
                {"include": "#include-"},
                {"include": "#directive"},
                {"include": "#struct"},
                {"include": "#operator"},
                {"include": "#tpyeoperator"},
                {"include": "#member-access"},
                {"include": "#parent"},
                {"include": "#this"},
                {"include": "#dollar"},
                {"include": "#namespace-operator"}
            ]
        },
        "keywords": {
			"patterns": [{
				"name": "keyword.control.hexpat",
				"match": "\\b(using|union|enum|bitfield|if|else|while|for|fn|return|break|continue|namespace|in|out)\\b"
			}]
		},
        "paren-expression": {
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": { "name": "punctuation.begin.bracket.round.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.end.bracket.round.hexpat" }
            },
            "name": "expression.group.hexpat",
            "patterns": [{ "include": "#expression" }]
        },
        "scope": {
            "begin": "{",
            "end": "}",
            "beginCaptures": {
                "0": { "name": "punctuation.begin.bracket.curly.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.end.bracket.curly.hexpat" }
            },
            "name": "scope.group.hexpat",
            "patterns": [{ "include": "#expression" }]
        },
        "type-unsigned": {
            "match": "\\bu(8|16|32|64|128)\\b",
            "name": "storage.type.unsigned.hexpat"
        },
        "type-signed": {
            "name": "storage.type.signed.hexpat",
            "match": "\\bs(8|16|32|64|128)\\b"
        },
        "type-float": {
            "name": "storage.type.float.hexpat",
            "match": "\\b(float|double)\\b"
        },
        "type-special": {
            "name": "storage.type.special.hexpat",
            "match": "\\b(char|char16|bool|padding|str|auto)\\b"
        },
        "type": {
            "name": "storage.type.hexpat",
            "match": "struct"
        },
        "endianness": {
            "name": "storage.modifier.endianness.hexpat",
            "match": "\\b(be|le)\\b"
        },
        "line-comment": {
            "name": "comment.line.double-slash.hexpat",
            "match": "//.*"
        },
        "block-comment": {
            "name": "comment.block.hexpat",
            "begin": "/\\*",
            "end": "\\*/",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.comment.begin.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.comment.end.hexpat" }
            }
        },
        "string": {
            "name": "string.quoted.double.hexpat",
            "begin": "\"",
            "end": "\"",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.begin.string.quoted.double.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.end.string.quoted.double.hexpat" }
            }
        },
        "char": {
            "name": "string.quoted.single.hexpat",
            "begin": "'",
            "end": "'",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.begin.string.quoted.single.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.end.string.quoted.single.hexpat" }
            },
            "patterns": [
				{
					"name": "constant.character.escape.hexpat",
					"match": "\\\\."
				}
			]
        },
        "attribute": {
            "name": "meta.attribute.brackets.square.hexpat",
            "begin": "\\[\\[",
            "end": "\\]\\]",
            "beginCaptures": {
                "0": { "name": "punctuation.attribute.begin.brackets.square.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.attribute.end.brackets.square.hexpat" }
            },
            "patterns": [{ "include": "#expression" }]
        },
        "array": {
            "name": "meta.access.brackets.square.hexpat",
            "begin": "\\[",
            "end": "\\]",
            "beginCaptures": {
                "0": { "name": "punctuation.access.begin.brackets.square.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.access.end.brackets.square.hexpat" }
            },
            "patterns": [{ "include": "#expression" }]
        },
        "semicolon": {
            "name": "punctuation.terminator.statement.hexpat",
            "match": ";"
        },
        "coma": {
            "name": "punctuation.separator.delimeter.hexpat",
            "match": ","
        },
        "constant-numeric-dec": {
            "name": "constant.numeric.dec.hexpat",
            "match": "\\b-?\\d+U?\\b"
        },
        "constant-numeric-hex": {
            "name": "constant.numeric.hex.hexpat",
            "match": "\\b0(x|X)[0-9a-fA-F]+\\b"
        },
        "constant-numeric-oct": {
            "name": "constant.numeric.oct.hexpat",
            "match": "\\b0(o|O)[0-7]+\\b"
        },
        "constant-numeric-bin": {
            "name": "constant.numeric.bin.hexpat",
            "match": "\\b0(b|B)[01]+\\b"
        },
        "constant-numeric-float": {
            "name": "constant.numeric.float.hexpat",
            "match": "\\b-?\\d+\\.\\d*F\\b"
        },
        "constant-numeric-double": {
            "name": "constant.numeric.double.hexpat",
            "match": "\\b-?\\d+\\.\\d*D?\\b"
        },
        "constant-language-boolean": {
            "name": "constant.language.bool.hexpat",
            "match": "\\b(true|false)\\b"
        },
        "include-": {
            "name": "meta.preprocessor.directive.include.hexpat",
            "begin": "^(#)(include)",
            "end": "$",
            "beginCaptures": {
                "1": { "name": "punctuation.definition.directive.include.hexpat" },
                "2": { "name": "keyword.control.directive.include.hexpat" }
            },
            "contentName": "keword.other.directive.include.hexpat",
            "patterns": [
                {
                    "name": "meta.definition.directive.include.parameter.bracket.angle.hexpat",
                    "begin": "<",
                    "end": ">",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.directive.include.paramenter.begin.bracket.angle.hexpat" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.directive.include.paramenter.end.bracket.angle.hexpat" }
                    }
                },
                {
                    "name": "meta.definition.directive.include.parameter.quote.double.hexpat",
                    "begin": "\"",
                    "end": "\"",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.directive.include.paramenter.begin.quote.double.hexpat" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.directive.include.paramenter.end.quote.double.end.hexpat" }
                    }
                }
            ]
        },
        "directive": {
            "name": "meta.preprocessor.directive.hexpat",
            "begin": "^#",
            "end": "$",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.directive.hexpat" }
            },
            "contentName": "keword.other.directive.hexpat"
        },
        "struct": {
            "name": "keyword.declaration.struct.hexpat",
            "match": "\\bstruct\\b"
        },
        "operator": {
            "name": "keyword.operator.hexpat",
            "match": "(\\+|-|\\*|/|%|>>|<<|~|&|\\||\\^|==|!=|>|<|>=|<=|!|&&|\\|\\||\\^\\^|=|@)"
        },
        "namespace-operator": {
            "name": "keyword.operator.namespace.hexpat",
            "match": "::"
        },
        "tpyeoperator": {
            "name": "entity.name.function.hexpat",
            "match": "\\b(addressof|sizeof)\\b"
        },
        "member-access": {
            "name": "punctuation.operator.access.dot.hexpat",
            "match": "\\."
        },
        "parent": {
            "name": "variable.language.parent.hexpat",
            "match": "\\bparent\\b"
        },
        "this": {
            "name": "variable.language.this.hexpat",
            "match": "\\bthis\\b"
        },
        "dollar": {
            "name": "variable.language.dollar.hexpat",
            "match": "\\$"
        }
	},
	"scopeName": "source.hexpat"
}
