{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Hexpat",
	"patterns": [
        {
            "include": "#toplevel-expression"
        }
	],
	"repository": {
        "toplevel-expression": {
            "patterns": [
                {"include": "#expression"},
                {"include": "#variable-declaration"}
            ]
        },
        "expression": {
            "patterns": [
                {"include": "#function-definition"},
                {"include": "#struct-definition"},
                {"include": "#bitfield-definition"},
                {"include": "#if-statement"},
                {"include": "#while-loop"},
                {"include": "#function-call"},
                {"include": "#keyword"},
                {"include": "#paren-expression"},
                {"include": "#scope"},
                {"include": "#line-comment"},
                {"include": "#block-comment"},
                {"include": "#endianness"},
                {"include": "#string"},
                {"include": "#char"},
                {"include": "#attribute"},
                {"include": "#array"},
                {"include": "#semicolon"},
                {"include": "#coma"},
                {"include": "#directive"},
                {"include": "#struct"},
                {"include": "#bitfield"},
                {"include": "#operator"},
                {"include": "#typeoperator"},
                {"include": "#member-access"},
                {"include": "#parent"},
                {"include": "#this"},
                {"include": "#dollar"},
                {"include": "#namespace"},
                {"include": "#small-patterns"}
            ]
        },
        "small-patterns": {
            "patterns": [
                {"include": "#keyword"},
                {"include": "#struct"},
                {"include": "#bitfield"},
                {"include": "#constant"},
                {"include": "#keyword-declaration"}
            ]
        },
        "constant": {
            "patterns": [
                {"include": "#constant-numeric-dec"},
                {"include": "#constant-numeric-hex"},
                {"include": "#constant-numeric-oct"},
                {"include": "#constant-numeric-bin"},
                {"include": "#constant-numeric-float"},
                {"include": "#constant-numeric-double"},
                {"include": "#constant-language-boolean"}
            ]
        },
        "struct-definition": {
            "name": "meta.definition.struct.hexpat",
            "begin": "\\b(struct)\\s+([_a-zA-Z]+[_a-zA-Z0-9]*)\\s*({)",
            "end": "}",
            "beginCaptures": {
                "1": { "name": "keyword.declaration.struct.hexpat" },
                "2": { "name": "entity.name.type.struct.hexpat" },
                "3": { "name": "punctuation.begin.bracket.curly.hexpat" }
            },
            "endCaptrues": {
                "0": { "name": "punctuation.end.bracket.curly.hexpat" }
            },
            "patterns": [
                { "include": "#toplevel-expression" }
            ]
        },
        "bitfield-definition": {
            "name": "meta.definition.bitfield.hexpat",
            "begin": "\\b(bitfield)\\s+([_a-zA-Z]+[_a-zA-Z0-9]*)\\s*({)",
            "end": "}",
            "beginCaptures": {
                "1": { "name": "keyword.declaration.bitfield.hexpat" },
                "2": { "name": "entity.name.type.bitfield.hexpat" },
                "3": { "name": "punctuation.begin.bracket.curly.hexpat" }
            },
            "endCaptrues": {
                "0": { "name": "punctuation.end.bracket.curly.hexpat" }
            },
            "patterns": [
                { "include": "#toplevel-expression" }
            ]
        },
        "function-definition": {
            "name": "meta.definition.function.hexpat",
            "begin": "\\s*\\b(fn)\\s+([_a-zA-Z]+[_a-zA-Z0-9]*)\\s*(\\()(.*)(\\))\\s*({?)",
            "end": "\\}?",
            "beginCaptures": {
                "1": { "name": "keyword.declaration.function.hexpat" },
                "2": { "name": "entity.name.function.hexpat" },
                "3": { "name": "punctuation.begin.bracket.round.hexpat" },
                "4": {
                    "patterns": [{"include": "#function-parameters"}]
                },
                "5": { "name": "punctuation.end.bracket.round.hexpat" },
                "6": { "name": "punctuation.begin.bracket.curly.hexpat" }
            },
            "endCaptrues": {
                "0": { "name": "punctuation.end.bracket.curly.hexpat" }
            },
            "patterns": [
                {"include": "#toplevel-expression"}
            ]
        },
        "function-parameters": {
            "patterns": [
                {
                    "match": "\\s*\\b(?:(u(?:8|16|32|64|128))|(s(?:8|16|32|64|128))|(float|double)|(char|char16|bool|padding|str|auto))\\b\\s*([_a-zA-Z]+[_a-zA-Z0-9]*)\\b",
                    "captures": {
                        "1": { "name": "storage.type.parameter.unsigned.hexpat" },
                        "2": { "name": "storage.type.parameter.signed.hexpat" },
                        "3": { "name": "storage.type.parameter.float.hexpat" },
                        "4": { "name": "storage.type.parameter.special.hexpat" },
                        "5": { "name": "variable.parameter.hexpat" }
                    }
                },
                {
                    "match": "\\s*\\b([_a-zA-Z]+?[_a-zA-Z0-9]*)\\b\\s*([_a-zA-Z]+[_a-zA-Z0-9]*)\\b",
                    "captures": {
                        "1": { "name": "storage.type.parameter.hexpat" },
                        "2": { "name": "variable.parameter.hexpat" }
                    }
                }
            ]
        },
        "if-statement": {
            "begin": "\\s*\\b(if)\\s*(\\()",
            "end": "\\)",
            "beginCaptures": {
                "1": { "name": "keyword.control.hexpat" },
                "2": { "name": "punctuation.begin.bracket.round.hexpat" }
            },
            "endCaptures": {
                "1": { "name": "punctuation.end.bracket.round.hexpat" }
            },
            "patterns": [{"include": "#expression"}]
        },
        "while-loop": {
            "begin": "\\s*\\b(while)\\s*(\\()(.*?)(\\))\\s*({?)",
            "end": "\\s*\\b\\}?",
            "beginCaptures": {
                "1": { "name": "keyword.control.hexpat" },
                "2": { "name": "punctuation.begin.bracket.round.hexpat" },
                "3": {
                    "patterns": [{"include": "#expression"}]
                },
                "4": { "name": "punctuation.end.bracket.round.hexpat" },
                "5": { "name": "punctuation.begin.bracket.curly.hexpat" }
            },
            "endCaptrues": {
                "0": { "name": "punctuation.end.bracket.curly.hexpat" }
            },
            "patterns": [{"include": "#toplevel-expression"}]
        },
        "variable-declaration": {
            "patterns": [
                {
                    "match": "(?<=@)\\s*\\b([_a-zA-Z]+[_a-zA-Z0-9]*)",
                    "captures": {
                        "1": {"name": "variable.hexpat"}
                    }
                },
                {
                    "name": "storage.modifier.endianness.hexpat",
                    "match": "\\s*\\b(be|le)\\b"
                },
                {
                    "patterns": [
                        {
                            "match": "\\s*\\b(u(?:8|16|32|64|128))\\b(?:\\s*([_a-zA-Z]+[_a-zA-Z0-9]*),?)*",
                            "captures": {
                                "1": { "name": "storage.type.unsigned.hexpat" },
                                "0": { "name": "variable.hexpat" }
                            }
                        },
                        {
                            "match": "\\s*\\b(s(?:8|16|32|64|128))\\b(?:\\s*([_a-zA-Z]+[_a-zA-Z0-9]*),?)*",
                            "captures": {
                                "1": { "name": "storage.type.signed.hexpat" },
                                "0": { "name": "variable.hexpat" }
                            }
                        },
                        {
                            "match": "\\s*\\b(float|double)\\b(?:\\s*([_a-zA-Z]+[_a-zA-Z0-9]*),?)*",
                            "captures": {
                                "1": { "name": "storage.type.float.hexpat" },
                                "0": { "name": "variable.hexpat" }
                            }
                        },
                        {
                            "match": "\\s*\\b(char|char16|bool|padding|str|auto)\\b(?:\\s*([_a-zA-Z]+[_a-zA-Z0-9]*),?)*",
                            "captures": {
                                "1": { "name": "storage.type.special.hexpat" },
                                "0": { "name": "variable.hexpat" }
                            }
                        }
                    ]
                },
                {
                    "match": "\\s*\\b([_a-zA-Z]+?[_a-zA-Z0-9]*)\\b(?:\\s*([_a-zA-Z]+[_a-zA-Z0-9]*),?)*",
                    "captures": {
                        "1": { "name": "storage.type.hexpat" },
                        "0": { "name": "variable.hexpat" }
                    }
                }
            ]
        },
        "keyword": {
            "name": "keyword.control.hexpat",
            "match": "\\s*\\b(using|return|if|else|while|for|break|continue|in|out)\\b"
		},
        "keyword-declaration": {
            "name": "keyword.definition.hexpat",
			"match": "\\s*\\b(union|enum|fn|namespace)\\b"
        },
        "function-call": {
            "name": "support.function.hexpat",
            "match": "\\s*\\b([_a-zA-Z]+[_a-zA-Z0-9]*)\\s+\\(\\b",
            "captures": {
                "1": { "name": "variable.function.hexpat"}
            }
        },
        "paren-expression": {
            "name": "meta.parens.hexpat",
            "begin": "(\\()\\s*(?:([_a-zA-Z]+[_a-zA-Z0-9]*)\\s+([_a-zA-Z]+[_a-zA-Z0-9]*))*",
            "end": "\\)",
            "beginCaptures": {
                "1": { "name": "punctuation.begin.bracket.round.hexpat" },
                "2": { "name": "storage.type.parameter.hexpat" },
                "3": { "name": "variable.parameter.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.end.bracket.round.hexpat" }
            },
            "patterns": [
                {"include": "#expression"}
            ]
        },
        "scope": {
            "begin": "{",
            "end": "}",
            "beginCaptures": {
                "0": { "name": "punctuation.begin.bracket.curly.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.end.bracket.curly.hexpat" }
            },
            "name": "scope.group.hexpat",
            "patterns": [{ "include": "#toplevel-expression" }]
        },
        "line-comment": {
            "name": "comment.line.double-slash.hexpat",
            "match": "//.*"
        },
        "block-comment": {
            "name": "comment.block.hexpat",
            "begin": "/\\*",
            "end": "\\*/",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.comment.begin.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.comment.end.hexpat" }
            }
        },
        "string": {
            "name": "string.quoted.double.hexpat",
            "begin": "\"",
            "end": "\"",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.quoted.double.begin.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.quoted.double.end.hexpat" }
            },
            "patterns": [
				{
					"name": "constant.character.escape.hexpat",
					"match": "\\\\."
				}
			]
        },
        "char": {
            "name": "string.quoted.single.hexpat",
            "begin": "'",
            "end": "'",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.quoted.single.begin.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.quoted.single.end.hexpat" }
            },
            "patterns": [
				{
					"name": "constant.character.escape.hexpat",
					"match": "\\\\."
				}
			]
        },
        "attribute": {
            "name": "meta.attribute.hexpat",
            "begin": "\\[{2}",
            "end": "\\]{2}",
            "beginCaptures": {
                "0": { "name": "punctuation.attribute.begin.brackets.square.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.attribute.end.brackets.square.hexpat" }
            },
            "patterns": [{ "include": "#expression" }]
        },
        "array": {
            "name": "meta.access.brackets.square.hexpat",
            "begin": "\\[{1}",
            "end": "\\]{1}",
            "beginCaptures": {
                "0": { "name": "punctuation.access.begin.brackets.square.hexpat" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.access.end.brackets.square.hexpat" }
            },
            "patterns": [{ "include": "#expression" }]
        },
        "semicolon": {
            "name": "punctuation.terminator.statement.hexpat",
            "match": ";"
        },
        "coma": {
            "name": "punctuation.separator.delimeter.hexpat",
            "match": ","
        },
        "constant-numeric-dec": {
            "name": "constant.numeric.dec.hexpat",
            "match": "\\s*\\b-?\\d+U?\\b"
        },
        "constant-numeric-hex": {
            "name": "constant.numeric.hex.hexpat",
            "match": "\\s*\\b0(x|X)[0-9a-fA-F]+\\b"
        },
        "constant-numeric-oct": {
            "name": "constant.numeric.oct.hexpat",
            "match": "\\s*\b0(o|O)[0-7]+\\b"
        },
        "constant-numeric-bin": {
            "name": "constant.numeric.bin.hexpat",
            "match": "\\b0(b|B)[01]+\\b"
        },
        "constant-numeric-float": {
            "name": "constant.numeric.float.hexpat",
            "match": "\\s*\\b-?\\d+\\.\\d*F\\b"
        },
        "constant-numeric-double": {
            "name": "constant.numeric.double.hexpat",
            "match": "\\s*\\b-?\\d+\\.\\d*D?\\b"
        },
        "constant-language-boolean": {
            "name": "constant.language.bool.hexpat",
            "match": "\\s*\\b(true|false)\\b"
        },
        "directive": {
            "name": "meta.preprocessor.directive.hexpat",
            "begin": "^#",
            "end": "$",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.directive.hexpat" }
            },
            "contentName": "keword.other.directive.hexpat",
            "patterns": [
                {
                    "name": "meta.preprocessor.define.include.hexpat",
                    "match": "define.*"
                },
                {
                    "name": "meta.preprocessor.directive.include.hexpat",
                    "begin": "include",
                    "end": "$",
                    "beginCaptures": {
                        "0": { "name": "keyword.control.directive.include.hexpat" }
                    },
                    "patterns": [
                        {
                            "name": "meta.definition.directive.include.parameter.bracket.angle.hexpat",
                            "begin": "<",
                            "end": ">",
                            "beginCaptures": {
                                "0": { "name": "punctuation.definition.directive.include.paramenter.begin.bracket.angle.hexpat" }
                            },
                            "endCaptures": {
                                "0": { "name": "punctuation.definition.directive.include.paramenter.end.bracket.angle.hexpat" }
                            }
                        },
                        {
                            "name": "meta.definition.directive.include.parameter.quote.double.hexpat",
                            "begin": "\"",
                            "end": "\"",
                            "beginCaptures": {
                                "0": { "name": "punctuation.definition.directive.include.paramenter.begin.quote.double.hexpat" }
                            },
                            "endCaptures": {
                                "0": { "name": "punctuation.definition.directive.include.paramenter.end.quote.double.end.hexpat" }
                            }
                        }
                    ]
                },
                {
                    "name": "meta.preprocessor.directive.pragma.hexpat",
                    "match": "pragma.*"
                }
            ]
        },
        "struct": {
            "name": "keyword.declaration.struct.hexpat",
            "match": "\\s*\\bstruct\\b"
        },
        "bitfield": {
            "name": "keyword.declaration.bitfield.hexpat",
            "match": "\\s*\\bbitfield\\b"
        },
        "operator": {
            "name": "keyword.operator.hexpat",
            "match": "(\\+|-|\\*|/|%|>>|<<|~|&|\\||\\^|==|!=|>|<|>=|<=|!|&&|\\|\\||\\^\\^|=|@)"
        },
        "namespace": {
            "name": "meta.access.namespace.hexpat",
            "match": "(?:([_a-zA-Z]+[_a-zA-Z0-9]*)(::))+",
            "captures": {
                "1": {"name": "entity.name.namespace.hexpat"},
                "2": {"name": "punctuation.separator.namespace.hexpat"}
            }
        },
        "typeoperator": {
            "name": "entity.name.function.hexpat",
            "match": "\\s*\\b(addressof|sizeof)\\b"
        },
        "member-access": {
            "name": "punctuation.operator.access.dot.hexpat",
            "match": "\\."
        },
        "parent": {
            "name": "variable.language.parent.hexpat",
            "match": "\\s*\\bparent\\b"
        },
        "this": {
            "name": "variable.language.this.hexpat",
            "match": "\\s*\\bthis\\b"
        },
        "dollar": {
            "name": "variable.language.dollar.hexpat",
            "match": "\\$"
        }
	},
	"scopeName": "source.hexpat"
}
